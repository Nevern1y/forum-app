"use client"

import { useEffect, useRef } from "react"
import { createClient } from "@/lib/supabase/client"
import type { RealtimeChannel } from "@supabase/supabase-js"

export type RealtimeEvent = "INSERT" | "UPDATE" | "DELETE"

interface UseRealtimeOptions<T = any> {
  table: string
  event?: RealtimeEvent | "*"
  filter?: string
  onInsert?: (payload: T) => void
  onUpdate?: (payload: { old: T; new: T }) => void
  onDelete?: (payload: T) => void
  onChange?: (payload: any) => void
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ realtime –∏–∑–º–µ–Ω–µ–Ω–∏—è
 */
export function useRealtime<T = any>({
  table,
  event = "*",
  filter,
  onInsert,
  onUpdate,
  onDelete,
  onChange,
}: UseRealtimeOptions<T>) {
  const channelRef = useRef<RealtimeChannel | null>(null)

  useEffect(() => {
    const supabase = createClient()

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞
    const channelName = `realtime:${table}:${Date.now()}`
    const channel = supabase.channel(channelName)

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
    let subscription = channel.on(
      "postgres_changes",
      {
        event: event,
        schema: "public",
        table: table,
        filter: filter,
      },
      (payload) => {
        console.log(`[Realtime ${table}]`, payload)

        // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        switch (payload.eventType) {
          case "INSERT":
            onInsert?.(payload.new as T)
            onChange?.(payload)
            break
          case "UPDATE":
            onUpdate?.({ old: payload.old as T, new: payload.new as T })
            onChange?.(payload)
            break
          case "DELETE":
            onDelete?.(payload.old as T)
            onChange?.(payload)
            break
        }
      }
    )

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    subscription.subscribe((status, err) => {
      console.log(`[Realtime ${table}] Status:`, status)
      
      if (status === "SUBSCRIBED") {
        console.log(`‚úÖ [Realtime ${table}] Successfully subscribed`)
      } else if (status === "CHANNEL_ERROR") {
        console.error(`‚ùå [Realtime ${table}] Channel error:`, err)
        console.error(`Check if realtime is enabled for ${table} in Supabase Dashboard`)
      } else if (status === "TIMED_OUT") {
        console.error(`‚è±Ô∏è [Realtime ${table}] Connection timed out`)
      } else if (status === "CLOSED") {
        console.warn(`üîå [Realtime ${table}] Connection closed`)
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        if (channelRef.current) {
          setTimeout(() => {
            console.log(`üîÑ [Realtime ${table}] Attempting to reconnect...`)
            channelRef.current?.subscribe()
          }, 5000)
        }
      }
    })

    channelRef.current = channel

    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (channelRef.current) {
        supabase.removeChannel(channelRef.current)
        channelRef.current = null
      }
    }
  }, [table, event, filter])

  return channelRef.current
}
